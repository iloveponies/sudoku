(conj #{} 1)
quit
(def sudoku-board
  (board [[5 3 0 0 7 0 0 0 0]
          [6 0 0 1 9 5 0 0 0]
          [0 9 8 0 0 0 0 6 0]
          [8 0 0 0 6 0 0 0 3]
          [4 0 0 8 0 3 0 0 1]
          [7 0 0 0 2 0 0 0 6]
          [0 6 0 0 0 0 2 8 0]
          [0 0 0 4 1 9 0 0 5]
          [0 0 0 0 8 0 0 7 9]]))
(def board identity)
(def sudoku-board
  (board [[5 3 0 0 7 0 0 0 0]
          [6 0 0 1 9 5 0 0 0]
          [0 9 8 0 0 0 0 6 0]
          [8 0 0 0 6 0 0 0 3]
          [4 0 0 8 0 3 0 0 1]
          [7 0 0 0 2 0 0 0 6]
          [0 6 0 0 0 0 2 8 0]
          [0 0 0 4 1 9 0 0 5]
          [0 0 0 0 8 0 0 7 9]]))
defn row-values [board coord] (reduce (fn [row-values elem] (conj row-values elem)) #{} (get board (get 0 coord))))
(defn row-values [board coord] (reduce (fn [row-values elem] (conj row-values elem)) #{} (get board (get 0 coord))))
(row-values sudoku-board [0 2])
(get sudoku-board (get [0 2] 0))
(reduce (fn [row-values elem] (conj row-values elem)) #{} (get sudoku-board (get 0 [0 2])))
(conj #{} 1)
(conj (conj #{} 1) 2)
(reduce (fn [row-values elem] (conj row-values elem)) #{} (1 2 3 4))
(reduce (fn [row-values elem] (conj row-values elem)) #{} '(1 2 3 4))
(reduce (fn [row-values elem] (conj row-values elem)) #{} [1 2 3 4]))
(reduce (fn [row-values elem] (conj row-values elem)) #{} (1 2 3 4)))
(reduce (fn [row-values elem] (conj row-values elem)) #{} '(1 2 3 4)))
(reduce (fn [row-values elem] (conj row-values elem)) #{} '(1 2 3 4))
(get sudoku-board (get 0 [0 2]))
(get (defn row-values [board coord] (reduce (fn [row-values elem] (conj row-values elem)) #{} (get board (get coord 0)))))
(defn row-values [board coord] (reduce (fn [row-values elem] (conj row-values elem)) #{} (get board (get coord 0))))
(row-values sudoku-board [0 2])
quit
(concat [1 2 3] [4 5 6])
(for [one [1 2 3 4] [0 one]])
(for [one [1 2 3 4]] [0 one])
(def board identity)
(defn coord-pairs [coords] (reduce (fn [pairs elem] (concat pairs (for [one coords] [elem one]))) [] coords))
(coord-pairs [0 1])
(coord-pairs [0 1 2])
quit
(ceil 0.2)
(math/ceil 0.2)
(math.ceil 0.2)
(Math.ceil 0.2)
(Math/ceil 0.2)
(range 1 2)
(range 1 4)
(range (* (- (Math/ceil (/ 0 3)) 1) 3) (* (Math/ceil (/ 0 3)) 3))
(range (* (- (Math/ceil (/ (+ 1 x) 3)) 1) 3) (* (Math/ceil (/ (+ 1 x) 3)) 3))
(range (* (- (Math/ceil (/ (+ 1 0) 3)) 1) 3) (* (Math/ceil (/ (+ 1 0) 3)) 3))
quit
(concat '(1 2 3) #{4 5 6})
(concat #{1 2 3} #{4 5 6})
quit
(% 6 3)
(mod 6 3)
quit
(def sudoku-board
  (board [[5 3 0 0 7 0 0 0 0]
          [6 0 0 1 9 5 0 0 0]
          [0 9 8 0 0 0 0 6 0]
          [8 0 0 0 6 0 0 0 3]
          [4 0 0 8 0 3 0 0 1]
          [7 0 0 0 2 0 0 0 6]
          [0 6 0 0 0 0 2 8 0]
          [0 0 0 4 1 9 0 0 5]
          [0 0 0 0 8 0 0 7 9]]))
(def board identity)
(def sudoku-board
  (board [[5 3 0 0 7 0 0 0 0]
          [6 0 0 1 9 5 0 0 0]
          [0 9 8 0 0 0 0 6 0]
          [8 0 0 0 6 0 0 0 3]
          [4 0 0 8 0 3 0 0 1]
          [7 0 0 0 2 0 0 0 6]
          [0 6 0 0 0 0 2 8 0]
          [0 0 0 4 1 9 0 0 5]
          [0 0 0 0 8 0 0 7 9]]))
defn coord-pairs [coords] (reduce (fn [pairs elem] (concat pairs (for [one coords] [elem one]))) [] coords))
(defn coord-pairs [coords] (reduce (fn [pairs elem] (concat pairs (for [one coords] [elem one]))) [] coords))
(coord-pairs (reduce (fn [div-by-three elem] (if (= 0 (mod elem 3)) (conj div-by-three elem) div-by-three)) [] (range 0 (count sudoku-board))))
quit
(def board identity)
(def sudoku-board
  (board [[5 3 0 0 7 0 0 0 0]
          [6 0 0 1 9 5 0 0 0]
          [0 9 8 0 0 0 0 6 0]
          [8 0 0 0 6 0 0 0 3]
          [4 0 0 8 0 3 0 0 1]
          [7 0 0 0 2 0 0 0 6]
          [0 6 0 0 0 0 2 8 0]
          [0 0 0 4 1 9 0 0 5]
          [0 0 0 0 8 0 0 7 9]]))
(defn coord-pairs [coords] (reduce (fn [pairs elem] (concat pairs (for [one coords] [elem one]))) [] coords))
(defn blocks [board] (let [all-block-coords (coord-pairs (reduce (fn [div-by-three elem] (if (= 0 (mod elem 3)) (conj div-by-three elem) div-by-three)) [] (range 0 (count board))))] 
                       (reduce (fn [all-blocks elem] (conj all-blocks (block-values board elem))) [] all-block-coords)))
(blocks sudoku-board)
(defn blocks2 [board] (let [all-block-coords (coord-pairs (reduce (fn [div-by-three elem] (if (= 0 (mod elem 3)) (conj div-by-three elem) div-by-three)) [] (range 0 (count board))))] 
                       (reduce (fn [all-blocks elem] (conj all-blocks (block-values board elem))) [] all-block-coords)))
(blocks2 sudoku-board)
(defn blocks [board] (let [all-block-coords (coord-pairs (reduce (fn [div-by-three elem] (if (= 0 (mod elem 3)) (conj div-by-three elem) div-by-three)) [] (range 0 (count board))))] 
                       (reduce (fn [all-blocks elem] (conj all-blocks (block-values board elem))) [] all-block-coords)))
(defn block-values [board coord] (let [x (get coord 0)
                                       y (get coord 1)
                                       top-left-coord (* (Math/floor (/ x 3)) 3)
                                       block-coords (coord-pairs (range (int top-left-coord) (+ (int top-left-coord) 3)))]
                                   (reduce (fn [values elem] (conj values (value-at board elem))) #{} block-coords)))
(defn value-at [board coord] (get-in board coord))
(defn block-values [board coord] (let [x (get coord 0)
                                       y (get coord 1)
                                       top-left-coord (* (Math/floor (/ x 3)) 3)
                                       block-coords (coord-pairs (range (int top-left-coord) (+ (int top-left-coord) 3)))]
                                   (reduce (fn [values elem] (conj values (value-at board elem))) #{} block-coords)))
(defn blocks [board] (let [all-block-coords (coord-pairs (reduce (fn [div-by-three elem] (if (= 0 (mod elem 3)) (conj div-by-three elem) div-by-three)) [] (range 0 (count board))))] 
                       (reduce (fn [all-blocks elem] (conj all-blocks (block-values board elem))) [] all-block-coords)))
(blocks sudoku-board)
(defn blocks [board] (let [all-block-coords (coord-pairs (reduce (fn [div-by-three elem] (if (= 0 (mod elem 3)) (conj div-by-three elem) div-by-three)) [] (range 0 (count board))))] 
                       all-block-coords))
(blocks sudoku-board)
(block-values sudoku-board [0 3])
(block-values sudoku-board [0 4])
(block-values sudoku-board [0 9])
(block-values sudoku-board [3 9])
(block-values sudoku-board [9 9])
(block-values sudoku-board [8 8])
quit
